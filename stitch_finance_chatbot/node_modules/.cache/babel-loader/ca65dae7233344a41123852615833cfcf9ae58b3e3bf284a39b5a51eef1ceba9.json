{"ast":null,"code":"// API service for connecting to Python backend\nconst API_BASE_URL = 'http://localhost:8000/api';\n\n// Helper function to handle API responses\nconst handleResponse = async response => {\n  if (!response.ok) {\n    throw new Error(`API Error: ${response.status} ${response.statusText}`);\n  }\n  return response.json();\n};\n\n// Stock API functions\nexport const stockAPI = {\n  // Search for stocks\n  searchStocks: async (query, limit = 10) => {\n    const response = await fetch(`${API_BASE_URL}/stocks/search?query=${query}&limit=${limit}`);\n    return handleResponse(response);\n  },\n  // Get stock quote\n  getStockQuote: async symbol => {\n    const response = await fetch(`${API_BASE_URL}/stocks/${symbol}/quote`);\n    return handleResponse(response);\n  },\n  // Get stock info\n  getStockInfo: async symbol => {\n    const response = await fetch(`${API_BASE_URL}/stocks/${symbol}/info`);\n    return handleResponse(response);\n  },\n  // Get stock history\n  getStockHistory: async (symbol, period = '1y', interval = '1d') => {\n    const response = await fetch(`${API_BASE_URL}/stocks/${symbol}/history?period=${period}&interval=${interval}`);\n    return handleResponse(response);\n  },\n  // Get stock analysis\n  getStockAnalysis: async symbol => {\n    const response = await fetch(`${API_BASE_URL}/stocks/${symbol}/analysis`);\n    return handleResponse(response);\n  }\n};\n\n// Market data API functions\nexport const marketAPI = {\n  // Get market indices\n  getMarketIndices: async () => {\n    const response = await fetch(`${API_BASE_URL}/market/indices`);\n    return handleResponse(response);\n  }\n};\n\n// Portfolio API functions\nexport const portfolioAPI = {\n  // Get user portfolios\n  getUserPortfolios: async userId => {\n    const response = await fetch(`${API_BASE_URL}/portfolios/${userId}`);\n    return handleResponse(response);\n  },\n  // Create portfolio\n  createPortfolio: async portfolioData => {\n    const response = await fetch(`${API_BASE_URL}/portfolios`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(portfolioData)\n    });\n    return handleResponse(response);\n  }\n};\n\n// Chat API functions (for future implementation)\nexport const chatAPI = {\n  // Send chat message\n  sendMessage: async message => {\n    // This would connect to a chat endpoint when implemented\n    const response = await fetch(`${API_BASE_URL}/chat`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        message\n      })\n    });\n    return handleResponse(response);\n  }\n};\n\n// Health check\nexport const checkAPIHealth = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL.replace('/api', '')}/health`);\n    return response.ok;\n  } catch (error) {\n    console.error('API health check failed:', error);\n    return false;\n  }\n};\nexport default {\n  stockAPI,\n  marketAPI,\n  portfolioAPI,\n  chatAPI,\n  checkAPIHealth\n};","map":{"version":3,"names":["API_BASE_URL","handleResponse","response","ok","Error","status","statusText","json","stockAPI","searchStocks","query","limit","fetch","getStockQuote","symbol","getStockInfo","getStockHistory","period","interval","getStockAnalysis","marketAPI","getMarketIndices","portfolioAPI","getUserPortfolios","userId","createPortfolio","portfolioData","method","headers","body","JSON","stringify","chatAPI","sendMessage","message","checkAPIHealth","replace","error","console"],"sources":["c:/Users/vijayjoping/vs code/code cubical5.0/stitch_finance_chatbot/src/api.js"],"sourcesContent":["// API service for connecting to Python backend\r\nconst API_BASE_URL = 'http://localhost:8000/api';\r\n\r\n// Helper function to handle API responses\r\nconst handleResponse = async (response) => {\r\n  if (!response.ok) {\r\n    throw new Error(`API Error: ${response.status} ${response.statusText}`);\r\n  }\r\n  return response.json();\r\n};\r\n\r\n// Stock API functions\r\nexport const stockAPI = {\r\n  // Search for stocks\r\n  searchStocks: async (query, limit = 10) => {\r\n    const response = await fetch(`${API_BASE_URL}/stocks/search?query=${query}&limit=${limit}`);\r\n    return handleResponse(response);\r\n  },\r\n\r\n  // Get stock quote\r\n  getStockQuote: async (symbol) => {\r\n    const response = await fetch(`${API_BASE_URL}/stocks/${symbol}/quote`);\r\n    return handleResponse(response);\r\n  },\r\n\r\n  // Get stock info\r\n  getStockInfo: async (symbol) => {\r\n    const response = await fetch(`${API_BASE_URL}/stocks/${symbol}/info`);\r\n    return handleResponse(response);\r\n  },\r\n\r\n  // Get stock history\r\n  getStockHistory: async (symbol, period = '1y', interval = '1d') => {\r\n    const response = await fetch(`${API_BASE_URL}/stocks/${symbol}/history?period=${period}&interval=${interval}`);\r\n    return handleResponse(response);\r\n  },\r\n\r\n  // Get stock analysis\r\n  getStockAnalysis: async (symbol) => {\r\n    const response = await fetch(`${API_BASE_URL}/stocks/${symbol}/analysis`);\r\n    return handleResponse(response);\r\n  }\r\n};\r\n\r\n// Market data API functions\r\nexport const marketAPI = {\r\n  // Get market indices\r\n  getMarketIndices: async () => {\r\n    const response = await fetch(`${API_BASE_URL}/market/indices`);\r\n    return handleResponse(response);\r\n  }\r\n};\r\n\r\n// Portfolio API functions\r\nexport const portfolioAPI = {\r\n  // Get user portfolios\r\n  getUserPortfolios: async (userId) => {\r\n    const response = await fetch(`${API_BASE_URL}/portfolios/${userId}`);\r\n    return handleResponse(response);\r\n  },\r\n\r\n  // Create portfolio\r\n  createPortfolio: async (portfolioData) => {\r\n    const response = await fetch(`${API_BASE_URL}/portfolios`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(portfolioData),\r\n    });\r\n    return handleResponse(response);\r\n  }\r\n};\r\n\r\n// Chat API functions (for future implementation)\r\nexport const chatAPI = {\r\n  // Send chat message\r\n  sendMessage: async (message) => {\r\n    // This would connect to a chat endpoint when implemented\r\n    const response = await fetch(`${API_BASE_URL}/chat`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ message }),\r\n    });\r\n    return handleResponse(response);\r\n  }\r\n};\r\n\r\n// Health check\r\nexport const checkAPIHealth = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL.replace('/api', '')}/health`);\r\n    return response.ok;\r\n  } catch (error) {\r\n    console.error('API health check failed:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport default {\r\n  stockAPI,\r\n  marketAPI,\r\n  portfolioAPI,\r\n  chatAPI,\r\n  checkAPIHealth\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}