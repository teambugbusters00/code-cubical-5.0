{"ast":null,"code":"// API service for connecting to Python backend\nconst API_BASE_URL = 'http://localhost:8000/api';\nconst WS_BASE_URL = 'ws://localhost:8000/ws';\n\n// Helper function to handle API responses\nconst handleResponse = async response => {\n  if (!response.ok) {\n    throw new Error(`API Error: ${response.status} ${response.statusText}`);\n  }\n  return response.json();\n};\n\n// WebSocket connection manager\nclass WebSocketManager {\n  constructor() {\n    this.connections = new Map();\n    this.reconnectAttempts = new Map();\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 3000;\n  }\n  connect(symbol, onMessage, onError = null) {\n    const wsUrl = `${WS_BASE_URL}/stocks/${symbol}`;\n    if (this.connections.has(symbol)) {\n      console.log(`WebSocket already connected for ${symbol}`);\n      return this.connections.get(symbol);\n    }\n    const ws = new WebSocket(wsUrl);\n    ws.onopen = () => {\n      console.log(`WebSocket connected for ${symbol}`);\n      this.reconnectAttempts.set(symbol, 0);\n    };\n    ws.onmessage = event => {\n      try {\n        const data = JSON.parse(event.data);\n        onMessage(data);\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    };\n    ws.onclose = () => {\n      console.log(`WebSocket disconnected for ${symbol}`);\n      this.connections.delete(symbol);\n\n      // Attempt to reconnect\n      this.attemptReconnect(symbol, onMessage, onError);\n    };\n    ws.onerror = error => {\n      console.error(`WebSocket error for ${symbol}:`, error);\n      if (onError) onError(error);\n    };\n    this.connections.set(symbol, ws);\n    return ws;\n  }\n  attemptReconnect(symbol, onMessage, onError) {\n    const attempts = this.reconnectAttempts.get(symbol) || 0;\n    if (attempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts.set(symbol, attempts + 1);\n      console.log(`Attempting to reconnect for ${symbol} (attempt ${attempts + 1}/${this.maxReconnectAttempts})`);\n      setTimeout(() => {\n        this.connect(symbol, onMessage, onError);\n      }, this.reconnectDelay * (attempts + 1));\n    } else {\n      console.error(`Max reconnection attempts reached for ${symbol}`);\n    }\n  }\n  disconnect(symbol) {\n    const ws = this.connections.get(symbol);\n    if (ws) {\n      ws.close();\n      this.connections.delete(symbol);\n      this.reconnectAttempts.delete(symbol);\n    }\n  }\n  disconnectAll() {\n    this.connections.forEach((ws, symbol) => {\n      this.disconnect(symbol);\n    });\n  }\n}\nconst wsManager = new WebSocketManager();\n\n// Stock API functions\nexport const stockAPI = {\n  // Search for stocks\n  searchStocks: async (query, limit = 10) => {\n    const response = await fetch(`${API_BASE_URL}/stocks/search?query=${query}&limit=${limit}`);\n    return handleResponse(response);\n  },\n  // Get stock quote\n  getStockQuote: async symbol => {\n    const response = await fetch(`${API_BASE_URL}/stocks/${symbol}/quote`);\n    return handleResponse(response);\n  },\n  // Get stock info\n  getStockInfo: async symbol => {\n    const response = await fetch(`${API_BASE_URL}/stocks/${symbol}/info`);\n    return handleResponse(response);\n  },\n  // Get stock history\n  getStockHistory: async (symbol, period = '1y', interval = '1d') => {\n    const response = await fetch(`${API_BASE_URL}/stocks/${symbol}/history?period=${period}&interval=${interval}`);\n    return handleResponse(response);\n  },\n  // Get stock analysis\n  getStockAnalysis: async symbol => {\n    const response = await fetch(`${API_BASE_URL}/stocks/${symbol}/analysis`);\n    return handleResponse(response);\n  }\n};\n\n// Market data API functions\nexport const marketAPI = {\n  // Get market indices\n  getMarketIndices: async () => {\n    const response = await fetch(`${API_BASE_URL}/market/indices`);\n    return handleResponse(response);\n  }\n};\n\n// Portfolio API functions\nexport const portfolioAPI = {\n  // Get user portfolios\n  getUserPortfolios: async userId => {\n    const response = await fetch(`${API_BASE_URL}/portfolios/${userId}`);\n    return handleResponse(response);\n  },\n  // Create portfolio\n  createPortfolio: async portfolioData => {\n    const response = await fetch(`${API_BASE_URL}/portfolios`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(portfolioData)\n    });\n    return handleResponse(response);\n  }\n};\n\n// Chat API functions (for future implementation)\nexport const chatAPI = {\n  // Send chat message\n  sendMessage: async message => {\n    // This would connect to a chat endpoint when implemented\n    const response = await fetch(`${API_BASE_URL}/chat`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        message\n      })\n    });\n    return handleResponse(response);\n  }\n};\n\n// Health check\nexport const checkAPIHealth = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL.replace('/api', '')}/health`);\n    return response.ok;\n  } catch (error) {\n    console.error('API health check failed:', error);\n    return false;\n  }\n};\nexport default {\n  stockAPI,\n  marketAPI,\n  portfolioAPI,\n  chatAPI,\n  checkAPIHealth\n};","map":{"version":3,"names":["API_BASE_URL","WS_BASE_URL","handleResponse","response","ok","Error","status","statusText","json","WebSocketManager","constructor","connections","Map","reconnectAttempts","maxReconnectAttempts","reconnectDelay","connect","symbol","onMessage","onError","wsUrl","has","console","log","get","ws","WebSocket","onopen","set","onmessage","event","data","JSON","parse","error","onclose","delete","attemptReconnect","onerror","attempts","setTimeout","disconnect","close","disconnectAll","forEach","wsManager","stockAPI","searchStocks","query","limit","fetch","getStockQuote","getStockInfo","getStockHistory","period","interval","getStockAnalysis","marketAPI","getMarketIndices","portfolioAPI","getUserPortfolios","userId","createPortfolio","portfolioData","method","headers","body","stringify","chatAPI","sendMessage","message","checkAPIHealth","replace"],"sources":["c:/Users/vijayjoping/vs code/code cubical5.0/stitch_finance_chatbot/src/api.js"],"sourcesContent":["// API service for connecting to Python backend\r\nconst API_BASE_URL = 'http://localhost:8000/api';\r\nconst WS_BASE_URL = 'ws://localhost:8000/ws';\r\n\r\n// Helper function to handle API responses\r\nconst handleResponse = async (response) => {\r\n  if (!response.ok) {\r\n    throw new Error(`API Error: ${response.status} ${response.statusText}`);\r\n  }\r\n  return response.json();\r\n};\r\n\r\n// WebSocket connection manager\r\nclass WebSocketManager {\r\n  constructor() {\r\n    this.connections = new Map();\r\n    this.reconnectAttempts = new Map();\r\n    this.maxReconnectAttempts = 5;\r\n    this.reconnectDelay = 3000;\r\n  }\r\n\r\n  connect(symbol, onMessage, onError = null) {\r\n    const wsUrl = `${WS_BASE_URL}/stocks/${symbol}`;\r\n\r\n    if (this.connections.has(symbol)) {\r\n      console.log(`WebSocket already connected for ${symbol}`);\r\n      return this.connections.get(symbol);\r\n    }\r\n\r\n    const ws = new WebSocket(wsUrl);\r\n\r\n    ws.onopen = () => {\r\n      console.log(`WebSocket connected for ${symbol}`);\r\n      this.reconnectAttempts.set(symbol, 0);\r\n    };\r\n\r\n    ws.onmessage = (event) => {\r\n      try {\r\n        const data = JSON.parse(event.data);\r\n        onMessage(data);\r\n      } catch (error) {\r\n        console.error('Error parsing WebSocket message:', error);\r\n      }\r\n    };\r\n\r\n    ws.onclose = () => {\r\n      console.log(`WebSocket disconnected for ${symbol}`);\r\n      this.connections.delete(symbol);\r\n\r\n      // Attempt to reconnect\r\n      this.attemptReconnect(symbol, onMessage, onError);\r\n    };\r\n\r\n    ws.onerror = (error) => {\r\n      console.error(`WebSocket error for ${symbol}:`, error);\r\n      if (onError) onError(error);\r\n    };\r\n\r\n    this.connections.set(symbol, ws);\r\n    return ws;\r\n  }\r\n\r\n  attemptReconnect(symbol, onMessage, onError) {\r\n    const attempts = this.reconnectAttempts.get(symbol) || 0;\r\n\r\n    if (attempts < this.maxReconnectAttempts) {\r\n      this.reconnectAttempts.set(symbol, attempts + 1);\r\n      console.log(`Attempting to reconnect for ${symbol} (attempt ${attempts + 1}/${this.maxReconnectAttempts})`);\r\n\r\n      setTimeout(() => {\r\n        this.connect(symbol, onMessage, onError);\r\n      }, this.reconnectDelay * (attempts + 1));\r\n    } else {\r\n      console.error(`Max reconnection attempts reached for ${symbol}`);\r\n    }\r\n  }\r\n\r\n  disconnect(symbol) {\r\n    const ws = this.connections.get(symbol);\r\n    if (ws) {\r\n      ws.close();\r\n      this.connections.delete(symbol);\r\n      this.reconnectAttempts.delete(symbol);\r\n    }\r\n  }\r\n\r\n  disconnectAll() {\r\n    this.connections.forEach((ws, symbol) => {\r\n      this.disconnect(symbol);\r\n    });\r\n  }\r\n}\r\n\r\nconst wsManager = new WebSocketManager();\r\n\r\n// Stock API functions\r\nexport const stockAPI = {\r\n  // Search for stocks\r\n  searchStocks: async (query, limit = 10) => {\r\n    const response = await fetch(`${API_BASE_URL}/stocks/search?query=${query}&limit=${limit}`);\r\n    return handleResponse(response);\r\n  },\r\n\r\n  // Get stock quote\r\n  getStockQuote: async (symbol) => {\r\n    const response = await fetch(`${API_BASE_URL}/stocks/${symbol}/quote`);\r\n    return handleResponse(response);\r\n  },\r\n\r\n  // Get stock info\r\n  getStockInfo: async (symbol) => {\r\n    const response = await fetch(`${API_BASE_URL}/stocks/${symbol}/info`);\r\n    return handleResponse(response);\r\n  },\r\n\r\n  // Get stock history\r\n  getStockHistory: async (symbol, period = '1y', interval = '1d') => {\r\n    const response = await fetch(`${API_BASE_URL}/stocks/${symbol}/history?period=${period}&interval=${interval}`);\r\n    return handleResponse(response);\r\n  },\r\n\r\n  // Get stock analysis\r\n  getStockAnalysis: async (symbol) => {\r\n    const response = await fetch(`${API_BASE_URL}/stocks/${symbol}/analysis`);\r\n    return handleResponse(response);\r\n  }\r\n};\r\n\r\n// Market data API functions\r\nexport const marketAPI = {\r\n  // Get market indices\r\n  getMarketIndices: async () => {\r\n    const response = await fetch(`${API_BASE_URL}/market/indices`);\r\n    return handleResponse(response);\r\n  }\r\n};\r\n\r\n// Portfolio API functions\r\nexport const portfolioAPI = {\r\n  // Get user portfolios\r\n  getUserPortfolios: async (userId) => {\r\n    const response = await fetch(`${API_BASE_URL}/portfolios/${userId}`);\r\n    return handleResponse(response);\r\n  },\r\n\r\n  // Create portfolio\r\n  createPortfolio: async (portfolioData) => {\r\n    const response = await fetch(`${API_BASE_URL}/portfolios`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(portfolioData),\r\n    });\r\n    return handleResponse(response);\r\n  }\r\n};\r\n\r\n// Chat API functions (for future implementation)\r\nexport const chatAPI = {\r\n  // Send chat message\r\n  sendMessage: async (message) => {\r\n    // This would connect to a chat endpoint when implemented\r\n    const response = await fetch(`${API_BASE_URL}/chat`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ message }),\r\n    });\r\n    return handleResponse(response);\r\n  }\r\n};\r\n\r\n// Health check\r\nexport const checkAPIHealth = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL.replace('/api', '')}/health`);\r\n    return response.ok;\r\n  } catch (error) {\r\n    console.error('API health check failed:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport default {\r\n  stockAPI,\r\n  marketAPI,\r\n  portfolioAPI,\r\n  chatAPI,\r\n  checkAPIHealth\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}